/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.maximgalushka.service.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.maximgalushka.service.model.History;
import com.maximgalushka.service.model.HistoryModel;
import com.maximgalushka.service.model.HistorySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the History service. Represents a row in the &quot;docs_History&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.maximgalushka.service.model.HistoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HistoryImpl}.
 * </p>
 *
 * @author mgalushka
 * @see HistoryImpl
 * @see com.maximgalushka.service.model.History
 * @see com.maximgalushka.service.model.HistoryModel
 * @generated
 */
@JSON(strict = true)
public class HistoryModelImpl extends BaseModelImpl<History>
	implements HistoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a History model instance should use the {@link com.maximgalushka.service.model.History} interface instead.
	 */
	public static final String TABLE_NAME = "docs_History";
	public static final Object[][] TABLE_COLUMNS = {
			{ "logId", Types.BIGINT },
			{ "documentId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "status", Types.VARCHAR },
			{ "updatedDate", Types.TIMESTAMP },
			{ "comment_", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table docs_History (logId LONG not null primary key,documentId LONG,userId LONG,status VARCHAR(75) null,updatedDate DATE null,comment_ VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table docs_History";
	public static final String ORDER_BY_JPQL = " ORDER BY history.logId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY docs_History.logId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.maximgalushka.service.model.History"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.maximgalushka.service.model.History"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.maximgalushka.service.model.History"),
			true);
	public static long DOCUMENTID_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static History toModel(HistorySoap soapModel) {
		History model = new HistoryImpl();

		model.setLogId(soapModel.getLogId());
		model.setDocumentId(soapModel.getDocumentId());
		model.setUserId(soapModel.getUserId());
		model.setStatus(soapModel.getStatus());
		model.setUpdatedDate(soapModel.getUpdatedDate());
		model.setComment(soapModel.getComment());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<History> toModels(HistorySoap[] soapModels) {
		List<History> models = new ArrayList<History>(soapModels.length);

		for (HistorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.maximgalushka.service.model.History"));

	public HistoryModelImpl() {
	}

	public long getPrimaryKey() {
		return _logId;
	}

	public void setPrimaryKey(long primaryKey) {
		setLogId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_logId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return History.class;
	}

	public String getModelClassName() {
		return History.class.getName();
	}

	@JSON
	public long getLogId() {
		return _logId;
	}

	public void setLogId(long logId) {
		_columnBitmask = -1L;

		_logId = logId;
	}

	@JSON
	public long getDocumentId() {
		return _documentId;
	}

	public void setDocumentId(long documentId) {
		_columnBitmask |= DOCUMENTID_COLUMN_BITMASK;

		if (!_setOriginalDocumentId) {
			_setOriginalDocumentId = true;

			_originalDocumentId = _documentId;
		}

		_documentId = documentId;
	}

	public long getOriginalDocumentId() {
		return _originalDocumentId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	public void setStatus(String status) {
		_status = status;
	}

	@JSON
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	@JSON
	public String getComment() {
		return _comment;
	}

	public void setComment(String comment) {
		_comment = comment;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public History toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (History)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					History.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		HistoryImpl historyImpl = new HistoryImpl();

		historyImpl.setLogId(getLogId());
		historyImpl.setDocumentId(getDocumentId());
		historyImpl.setUserId(getUserId());
		historyImpl.setStatus(getStatus());
		historyImpl.setUpdatedDate(getUpdatedDate());
		historyImpl.setComment(getComment());

		historyImpl.resetOriginalValues();

		return historyImpl;
	}

	public int compareTo(History history) {
		int value = 0;

		if (getLogId() < history.getLogId()) {
			value = -1;
		}
		else if (getLogId() > history.getLogId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		History history = null;

		try {
			history = (History)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = history.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		HistoryModelImpl historyModelImpl = this;

		historyModelImpl._originalDocumentId = historyModelImpl._documentId;

		historyModelImpl._setOriginalDocumentId = false;

		historyModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<History> toCacheModel() {
		HistoryCacheModel historyCacheModel = new HistoryCacheModel();

		historyCacheModel.logId = getLogId();

		historyCacheModel.documentId = getDocumentId();

		historyCacheModel.userId = getUserId();

		historyCacheModel.status = getStatus();

		String status = historyCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			historyCacheModel.status = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			historyCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			historyCacheModel.updatedDate = Long.MIN_VALUE;
		}

		historyCacheModel.comment = getComment();

		String comment = historyCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			historyCacheModel.comment = null;
		}

		return historyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{logId=");
		sb.append(getLogId());
		sb.append(", documentId=");
		sb.append(getDocumentId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append(", comment=");
		sb.append(getComment());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.maximgalushka.service.model.History");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>logId</column-name><column-value><![CDATA[");
		sb.append(getLogId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentId</column-name><column-value><![CDATA[");
		sb.append(getDocumentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comment</column-name><column-value><![CDATA[");
		sb.append(getComment());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = History.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			History.class
		};
	private long _logId;
	private long _documentId;
	private long _originalDocumentId;
	private boolean _setOriginalDocumentId;
	private long _userId;
	private String _userUuid;
	private String _status;
	private Date _updatedDate;
	private String _comment;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private History _escapedModelProxy;
}